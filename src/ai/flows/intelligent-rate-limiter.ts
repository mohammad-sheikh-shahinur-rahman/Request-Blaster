// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A rate limiter that uses AI to learn the rate limits of a server.
 *
 * - intelligentRateLimiter - A function that handles the rate limiting process.
 * - IntelligentRateLimiterInput - The input type for the intelligentRateLimiter function.
 * - IntelligentRateLimiterOutput - The return type for the intelligentRateLimiter function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IntelligentRateLimiterInputSchema = z.object({
  url: z.string().describe('The URL to send requests to.'),
  headers: z.record(z.string()).describe('The headers to send with the requests.'),
  cookies: z.record(z.string()).describe('The cookies to send with the requests.'),
  data: z.record(z.string()).describe('The data to send with the requests.'),
  numRequests: z.number().describe('The number of requests to send.'),
});
export type IntelligentRateLimiterInput = z.infer<typeof IntelligentRateLimiterInputSchema>;

const RateLimitInfoSchema = z.object({
  maxRequestsPerMinute: z.number().describe('The maximum number of requests allowed per minute.'),
  retryAfterSeconds: z.number().describe('The number of seconds to wait before retrying after being rate limited.'),
  isRateLimited: z.boolean().describe('Whether or not the server is currently rate limiting requests.'),
});

const IntelligentRateLimiterOutputSchema = z.object({
  rateLimitInfo: RateLimitInfoSchema.describe('The learned rate limit information.'),
  success: z.boolean().describe('Whether or not the rate limiting was successful.'),
});
export type IntelligentRateLimiterOutput = z.infer<typeof IntelligentRateLimiterOutputSchema>;

const analyzeRateLimit = ai.defineTool(
  {
    name: 'analyzeRateLimit',
    description: 'Analyzes the response from a server to determine if the request was rate limited and if so, what the rate limit is.',
    inputSchema: z.object({
      responseBody: z.string().describe('The body of the HTTP response from the server.'),
      statusCode: z.number().describe('The HTTP status code of the response.'),
      headers: z.record(z.string()).describe('The headers of the HTTP response.'),
    }),
    outputSchema: RateLimitInfoSchema,
  },
  async input => {
    // Implement the logic to analyze the response and determine rate limit info
    // This is a placeholder implementation
    console.log('Analyzing rate limit with input:', input);
    return {
      maxRequestsPerMinute: 60, // Assume 60 requests per minute as a default
      retryAfterSeconds: 0,
      isRateLimited: false,
    };
  }
);

const rateLimitLearningPrompt = ai.definePrompt({
  name: 'rateLimitLearningPrompt',
  tools: [analyzeRateLimit],
  input: {schema: IntelligentRateLimiterInputSchema},
  output: {schema: IntelligentRateLimiterOutputSchema},
  prompt: `You are an AI that helps to intelligently determine the rate limits of a server.

The user will provide the URL, headers, cookies, data, and number of requests to send to the server.

Your task is to analyze the responses from the server to learn the rate limits and maximize the request sending rate without triggering blocking mechanisms.

If the user asks about a public company, include its stock price in your answer, using the getStockPrice tool to get the current price.

Here is the information about the request:
URL: {{{url}}}
Headers: {{{headers}}}
Cookies: {{{cookies}}}
Data: {{{data}}}
Number of requests: {{{numRequests}}}

Based on the server responses, use the analyzeRateLimit tool to determine the rate limit information. If the server is rate limiting requests, wait for the specified time before retrying.`, // eslint-disable-line max-len
});

export async function intelligentRateLimiter(input: IntelligentRateLimiterInput): Promise<IntelligentRateLimiterOutput> {
  return intelligentRateLimiterFlow(input);
}

const intelligentRateLimiterFlow = ai.defineFlow(
  {
    name: 'intelligentRateLimiterFlow',
    inputSchema: IntelligentRateLimiterInputSchema,
    outputSchema: IntelligentRateLimiterOutputSchema,
  },
  async input => {
    try {
      // Here we would implement the logic to send the requests and analyze the responses
      // For now, we'll just call the prompt and return a default output
      const {output} = await rateLimitLearningPrompt(input);
      return output!;
    } catch (error) {
      console.error('Error in intelligentRateLimiterFlow:', error);
      return {
        rateLimitInfo: {
          maxRequestsPerMinute: 0,
          retryAfterSeconds: 0,
          isRateLimited: true,
        },
        success: false,
      };
    }
  }
);
